import { IdSelectorLibrary } from './idSelectorLibrary';
import { ClassSelectorLibrary } from './classSelectorLibrary';
import { BaseLibrary, BaseLibraryOptions } from './baseLibrary';
export declare class SelectorsLibrary extends BaseLibrary {
    selectors: (ClassSelectorLibrary | IdSelectorLibrary)[];
    callOnBoth<T extends (...args: any) => any>(fun: string, ...args: Parameters<T>): ReturnType<T>[];
    reset(): ReturnType<BaseLibrary['fillLibrary']>;
    setAlphabet(...args: Parameters<BaseLibrary['setAlphabet']>): ReturnType<BaseLibrary['setAlphabet']>;
    getClassSelector(): ClassSelectorLibrary;
    getIdSelector(): IdSelectorLibrary;
    fillLibrary(...args: Parameters<BaseLibrary['fillLibrary']>): ReturnType<BaseLibrary['fillLibrary']>;
    set(...args: Parameters<BaseLibrary['set']>): ReturnType<BaseLibrary['set']>;
    setMultiple(...args: Parameters<BaseLibrary['setMultiple']>): ReturnType<BaseLibrary['setMultiple']>;
    setPrefix(...args: Parameters<BaseLibrary['setPrefix']>): ReturnType<BaseLibrary['setPrefix']>;
    setSuffix(...args: Parameters<BaseLibrary['setSuffix']>): ReturnType<BaseLibrary['setSuffix']>;
    getSuffix(): string;
    getPrefix(): string;
    setExclude(...args: Parameters<BaseLibrary['setExclude']>): ReturnType<BaseLibrary['setExclude']>;
    setInclude(...args: Parameters<BaseLibrary['setInclude']>): ReturnType<BaseLibrary['setInclude']>;
    setReserved(...args: Parameters<BaseLibrary['setReserved']>): ReturnType<BaseLibrary['setReserved']>;
    setAttributeSelector(data: string | string[]): void;
    replaceAttributeSelector(selector: string): string | false;
    getAllRegex(opts?: BaseLibraryOptions): RegExp;
    get(value: string, opts?: BaseLibraryOptions): string;
    isReserved(...args: Parameters<BaseLibrary['isReserved']>): ReturnType<BaseLibrary['isReserved']>;
    isExcluded(...args: Parameters<BaseLibrary['isExcluded']>): ReturnType<BaseLibrary['isExcluded']>;
}
declare const _default: SelectorsLibrary;
export default _default;
