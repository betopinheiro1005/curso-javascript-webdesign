"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const keyframesLibrary_1 = __importDefault(require("./keyframesLibrary"));

const selectorsLibrary_1 = __importDefault(require("./selectorsLibrary"));

const cssVariablesLibrary_1 = __importDefault(require("./cssVariablesLibrary"));

const extractFromHtml_1 = __importDefault(require("./helpers/extractFromHtml"));

exports.default = (code, opts = {}) => {
  const defaultOptions = {
    codeType: 'css',
    ignoreAttributeSelectors: false,
    ignoreCssVariables: false,
    replaceKeyframes: false,
    prefix: '',
    suffix: ''
  };
  const options = Object.assign(Object.assign({}, defaultOptions), opts);
  let cssCode = code;

  if (options.codeType === 'html') {
    const htmlExtractedCss = (0, extractFromHtml_1.default)(code.toString()); // no css code found to fill

    if (htmlExtractedCss.length <= 0) {
      return;
    }

    cssCode = htmlExtractedCss.join(' ');
  }

  const data = cssCode.toString();
  selectorsLibrary_1.default.setPrefix(options.prefix);
  selectorsLibrary_1.default.setSuffix(options.suffix);

  if (!options.ignoreAttributeSelectors) {
    selectorsLibrary_1.default.setAttributeSelector(data);
  }

  if (options.replaceKeyframes) {
    keyframesLibrary_1.default.fillLibrary(data);
  }

  if (!options.ignoreCssVariables) {
    cssVariablesLibrary_1.default.fillLibrary(data);
  }

  selectorsLibrary_1.default.fillLibrary(data, options);
};

module.exports = exports.default;