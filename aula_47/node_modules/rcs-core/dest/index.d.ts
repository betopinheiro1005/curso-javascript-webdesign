/// <reference types="node" />
import * as nameGenerator from './nameGenerator';
declare const _default: {
    stats: () => {
        ids: {
            unused: string[];
            usageCount: import("./statistics/generate").UsageCount;
        };
        classes: {
            unused: string[];
            usageCount: import("./statistics/generate").UsageCount;
        };
        cssVariables: {
            unused: string[];
            usageCount: import("./statistics/generate").UsageCount;
        };
        keyframes: {
            unused: string[];
            usageCount: import("./statistics/generate").UsageCount;
        };
    };
    replace: {
        string: (string: string, regex?: RegExp | undefined, options?: import("./replace/string").ReplaceStringOptions) => string;
        regex: {
            selectors: RegExp;
            strings: RegExp;
            classAttributeSelectors: RegExp;
            idAttributeSelectors: RegExp;
            commonAttributeSelectors: RegExp;
            keyframes: RegExp;
            cssVariables: RegExp;
            templateSelectors: RegExp;
            likelySelector: RegExp;
        };
        html: (code: string, opts?: import("./replace/html").ReplaceHtmlOptions) => string;
        any: (code: string, opts?: import("./replace/string").ReplaceStringOptions) => string;
        css: (css: string | Buffer, opts?: import("./replace/css").ReplaceCssOptions) => string;
        pug: (code: string, opts?: import("./replace/pug").ReplacePugOptions) => string;
        js: (code: string | Buffer, espreeOptions?: any) => string;
    };
    baseLibrary: import("./baseLibrary").BaseLibrary;
    fillLibraries: (code: string | Buffer, opts?: import("./fillLibraries").FillLibrariesOptions) => void;
    nameGenerator: typeof nameGenerator;
    selectorsLibrary: import("./selectorsLibrary").SelectorsLibrary;
    keyframesLibrary: import("./keyframesLibrary").KeyframesLibrary;
    cssVariablesLibrary: import("./cssVariablesLibrary").CssVariablesLibrary;
    helpers: {
        htmlToAst: (code: string) => any;
        extractFromHtml: (code: string, type?: string) => string[];
    };
    mapping: {
        generate: (opts?: import("./mapping/generate").GenerateMappingOptions) => import("./mapping/load").Mapping;
        load: (mapping: import("./mapping/load").Mapping, options?: import("./mapping/load").LoadMappingOptions) => void;
    };
    optimize: () => void;
    statistics: {
        generate: () => {
            ids: {
                unused: string[];
                usageCount: import("./statistics/generate").UsageCount;
            };
            classes: {
                unused: string[];
                usageCount: import("./statistics/generate").UsageCount;
            };
            cssVariables: {
                unused: string[];
                usageCount: import("./statistics/generate").UsageCount;
            };
            keyframes: {
                unused: string[];
                usageCount: import("./statistics/generate").UsageCount;
            };
        };
        load: (statisticsMap: {
            ids: {
                unused: string[];
                usageCount: import("./statistics/generate").UsageCount;
            };
            classes: {
                unused: string[];
                usageCount: import("./statistics/generate").UsageCount;
            };
            cssVariables: {
                unused: string[];
                usageCount: import("./statistics/generate").UsageCount;
            };
            keyframes: {
                unused: string[];
                usageCount: import("./statistics/generate").UsageCount;
            };
        }) => void;
    };
    warnings: import("./allWarnings").Warnings;
};
export default _default;
