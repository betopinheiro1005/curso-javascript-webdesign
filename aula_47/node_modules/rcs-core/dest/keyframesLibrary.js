"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KeyframesLibrary = void 0;

const baseLibrary_1 = require("./baseLibrary");

const regex_1 = __importDefault(require("./replace/regex"));

class KeyframesLibrary extends baseLibrary_1.BaseLibrary {
  constructor() {
    super('keyframe');
  } // eslint-disable-next-line class-methods-use-this


  fillLibrary(data) {
    const code = data.toString(); // set the keyframes here

    const keyframes = code.match(regex_1.default.keyframes);

    if (Array.isArray(keyframes)) {
      this.set(keyframes.map(key => key.split(/\s+/)[1]));
    }
  } // /fillLibrary


  get(selector, opts = {}) {
    const defaultOptions = Object.assign({
      origKeyframe: true
    }, opts);
    const options = Object.assign(Object.assign({}, defaultOptions), {
      isOriginalValue: defaultOptions.origKeyframe
    });
    return super.get(selector, options);
  }

  get keyframes() {
    return this.values;
  }

  set keyframes(keyframes) {
    this.values = keyframes;
  }

  get compressedKeyframes() {
    return this.compressedValues;
  }

  set compressedKeyframes(compressedKeyframes) {
    this.compressedValues = compressedKeyframes;
  }

}

exports.KeyframesLibrary = KeyframesLibrary;
exports.default = new KeyframesLibrary();