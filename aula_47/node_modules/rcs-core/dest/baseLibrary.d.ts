/// <reference types="node" />
import { NameGenerator } from './nameGenerator';
import { Source } from './allWarnings';
export interface BaseLibraryOptions {
    ignoreAttributeSelectors?: boolean;
    source?: Source;
    isOriginalValue?: boolean;
    preventRandomName?: boolean;
    addSelectorType?: boolean;
    countStats?: boolean;
    getRenamedValues?: boolean;
    regex?: boolean;
}
export declare class BaseLibrary {
    nameGenerator: NameGenerator;
    values: {
        [s: string]: string;
    };
    compressedValues: {
        [s: string]: string;
    };
    reserved: string[];
    excludes: string[];
    excludesRegex: (RegExp | string)[];
    includes: string[];
    includesRegex: (RegExp | string)[];
    prefix: string;
    suffix: string;
    meta: {
        [s: string]: {
            appearanceCount: number;
        };
    };
    static hasReservedValue(value: string, source?: Source): string;
    constructor(name?: string);
    prefetchValue: (value: string) => string;
    initReset(): void;
    reset(): void;
    setAlphabet(alphabet: string): void;
    fillLibrary(data: string | Buffer, options?: BaseLibraryOptions): void;
    prepareValue(replacementObject: {
        value: string;
        renamedValue: string | undefined;
    }, opts: BaseLibraryOptions): {
        value: string;
        renamedValue: string | undefined;
    } | null;
    postfetchValue(value: string, opts?: BaseLibraryOptions): string;
    get(value: string, opts?: BaseLibraryOptions): string;
    set(value: string | string[], renamedValue?: string | BaseLibraryOptions, opts?: BaseLibraryOptions): void;
    smartAllocate(value: string, renamedValue: string | undefined): void;
    swap(val1: string, val2: string): void;
    setMultiple(values?: {
        [s: string]: string;
    }, options?: BaseLibraryOptions): void;
    setPrefix(prefix: string): void;
    setSuffix(suffix: string): void;
    private setInternalLists;
    setExclude(toExclude: string | RegExp | (string | RegExp)[]): void;
    setInclude(toInclude: string | RegExp | (string | RegExp)[]): void;
    setReserved(toReserve: string | string[]): void;
    isReserved(string: string): boolean;
    isExcluded(string: string): boolean;
}
declare const _default: BaseLibrary;
export default _default;
