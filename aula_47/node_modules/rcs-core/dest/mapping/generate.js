"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const selectorsLibrary_1 = __importDefault(require("../selectorsLibrary"));

const keyframesLibrary_1 = __importDefault(require("../keyframesLibrary"));

const cssVariablesLibrary_1 = __importDefault(require("../cssVariablesLibrary"));

const getAttributesMapping = attributeSelectors => Object.entries(attributeSelectors).reduce((prev, [key, value]) => {
  const type = value.type === 'class' ? '.' : '#';
  return [...prev, type + key];
}, []);

const generate = (opts = {}) => {
  if (Object.prototype.toString.call(opts) !== '[object Object]') {
    console.warn(`Mapping input is not an valid object. Found ${opts} instead`);
    return {};
  }

  const {
    origValues = true
  } = opts; // selectors

  const cssClassMapping = selectorsLibrary_1.default.getClassSelector().getAll({
    getRenamedValues: !origValues,
    addSelectorType: true
  });
  const cssIdMapping = selectorsLibrary_1.default.getIdSelector().getAll({
    getRenamedValues: !origValues,
    addSelectorType: true
  }); // keyframes

  let {
    keyframes
  } = keyframesLibrary_1.default;

  if (!origValues) {
    keyframes = Object.entries(keyframes).reduce((prev, [key, value]) => Object.assign(Object.assign({}, prev), {
      // swap values
      [key.charAt(0) + value]: key.slice(1)
    }), {});
  } // css variables


  let cssVariables = origValues ? cssVariablesLibrary_1.default.values : cssVariablesLibrary_1.default.compressedCssVariables;
  cssVariables = Object.entries(cssVariables).reduce((prev, [key, value]) => Object.assign(Object.assign({}, prev), {
    [`-${key}`]: value
  }), {}); // attributeSelectors

  const cssClassAttributesMapping = getAttributesMapping(selectorsLibrary_1.default.getClassSelector().attributeSelectors);
  const cssIdAttributesMapping = getAttributesMapping(selectorsLibrary_1.default.getIdSelector().attributeSelectors);
  const result = {};
  const allSelectors = Object.assign(Object.assign(Object.assign(Object.assign({}, cssClassMapping), cssIdMapping), keyframes), cssVariables);
  const allAttributeSelectors = [...cssClassAttributesMapping, ...cssIdAttributesMapping];

  if (Object.keys(allSelectors).length > 0) {
    result.selectors = allSelectors;
  }

  if (allAttributeSelectors.length > 0) {
    result.attributeSelectors = allAttributeSelectors;
  }

  return result;
};

exports.default = generate;
module.exports = exports.default;