"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const selectorsLibrary_1 = __importDefault(require("../selectorsLibrary"));

const keyframesLibrary_1 = __importDefault(require("../keyframesLibrary"));

const cssVariablesLibrary_1 = __importDefault(require("../cssVariablesLibrary"));

const load = (mapping, options = {}) => {
  if (Object.prototype.toString.call(mapping) !== '[object Object]') {
    console.warn(`Could not load mapping. Invalid type found ${options} instead of object`);
    return;
  }

  let sortedSelectors = mapping.selectors || {};
  const attributeSelectors = mapping.attributeSelectors || [];
  const {
    origValues = true
  } = options; // swap values if it's not the original values first

  if (!origValues) {
    const tempMapping = {};
    Object.keys(sortedSelectors).forEach(key => {
      const value = sortedSelectors[key];
      const modKey = key.slice(1, key.length);
      tempMapping[key.charAt(0) + value] = modKey;
    });
    sortedSelectors = tempMapping;
  }

  attributeSelectors.forEach(key => {
    const attributeSelector = key.slice(2);
    const firstChar = key.charAt(0);
    let secondChar = key.charAt(1);

    if (secondChar === '=') {
      // if the second char is just a comparison it should not get added
      // as a '=' is already added when setting the attributeSelector
      secondChar = '';
    }

    if (firstChar === '.') {
      selectorsLibrary_1.default.getClassSelector().setAttributeSelector(`[class${secondChar}=${attributeSelector}]`);
    } else if (firstChar === '#') {
      selectorsLibrary_1.default.getIdSelector().setAttributeSelector(`[id${secondChar}=${attributeSelector}]`);
    }
  });
  Object.entries(sortedSelectors).forEach(([key, value]) => {
    switch (key.charAt(0)) {
      case '-':
        cssVariablesLibrary_1.default.set(`-${key}`, value);
        break;

      case '@':
        keyframesLibrary_1.default.set(key, value);
        break;

      case '.':
      case '#':
      default:
        selectorsLibrary_1.default.set(key, value);
    }
  });
};

exports.default = load;
module.exports = exports.default;