/// <reference types="node" />
import { NameGenerator } from './nameGenerator';
import { BaseLibrary, BaseLibraryOptions } from './baseLibrary';
export interface AttributeSelector {
    type: string;
    originalString: string;
    regexType: string;
    nameGeneratorCounter: NameGenerator;
}
export interface AttributeLibraryOptions extends BaseLibraryOptions {
    regex?: boolean;
    getRenamedValues?: boolean;
}
export interface GetAllOptions {
    getRenamedValues?: boolean;
    regex?: boolean;
    addSelectorType?: boolean;
}
export declare class AttributeLibrary extends BaseLibrary {
    attributeSelectors: {
        [s: string]: AttributeSelector;
    };
    static isSelector(selector: string): boolean;
    static removePseudoElements(value: string): string;
    static replaceAnAttributeSelector(result: string | false, attributeSelector: string, value: AttributeSelector, slicedSelector: string): string | false;
    constructor(name?: string);
    selectorFirstChar: () => string;
    prefetchValue: (selector: string) => string;
    getAttributeSelectorRegex: () => RegExp;
    reset(): ReturnType<BaseLibrary['reset']>;
    fillLibrary(data: string | Buffer, options?: {}): ReturnType<BaseLibrary['fillLibrary']>;
    isValidSelector(selector: string): boolean;
    prepareValue(repObj: Parameters<BaseLibrary['prepareValue']>[0], options?: AttributeLibraryOptions): ReturnType<BaseLibrary['prepareValue']>;
    postfetchValue(result: string, opts: AttributeLibraryOptions): string | any;
    getAll(opts?: Omit<GetAllOptions, 'regex'> & {
        regex: true;
    }): RegExp | undefined;
    getAll(opts?: Omit<GetAllOptions, 'regex'> & {
        regex?: false;
    }): {
        [s: string]: string;
    };
    setAttributeSelector(attributeSelector: string | string[]): void;
    replaceAttributeSelector(selector: string): string | false;
}
declare const _default: AttributeLibrary;
export default _default;
