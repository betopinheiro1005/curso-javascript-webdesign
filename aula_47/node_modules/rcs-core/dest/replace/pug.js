"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const pug_lexer_1 = __importDefault(require("pug-lexer"));

const pug_walk_1 = __importDefault(require("pug-walk"));

const pug_parser_1 = __importDefault(require("pug-parser"));

const lodash_merge_1 = __importDefault(require("lodash.merge"));

const wrap_1 = __importDefault(require("pug-runtime/wrap"));

const pug_code_gen_1 = __importDefault(require("pug-code-gen"));

const pug_source_gen_1 = __importDefault(require("pug-source-gen"));

const js_1 = __importDefault(require("./js"));

const css_1 = __importDefault(require("./css"));

const selectorsLibrary_1 = __importDefault(require("../selectorsLibrary"));

const shouldTriggerAttribute_1 = __importDefault(require("../helpers/shouldTriggerAttribute"));

const replacePug = (code, opts = {}) => {
  const lexed = (0, pug_lexer_1.default)(code);
  const ast = (0, pug_parser_1.default)(lexed);
  const defaultOptions = {
    espreeOptions: {},
    triggerClassAttributes: [],
    triggerIdAttributes: []
  };
  const options = (0, lodash_merge_1.default)({}, opts, defaultOptions);
  (0, pug_walk_1.default)(ast, node => {
    if (node.name === 'script' || node.name === 'style') {
      const modifiedBlockNodes = node.block.nodes.map(block => {
        if (block.type === 'Code') {
          // eslint-disable-next-line no-param-reassign
          block.type = 'Text'; // eslint-disable-next-line no-param-reassign

          block.val = `#{${block.val}}`;
        }

        return block;
      });
      const newCode = (0, wrap_1.default)((0, pug_code_gen_1.default)(Object.assign(Object.assign({}, node.block), {
        nodes: modifiedBlockNodes
      })))();
      const replacedCode = node.name === 'script' ? (0, js_1.default)(newCode, (0, lodash_merge_1.default)({}, options.espreeOptions, {
        sourceFile: opts.sourceFile
      })) : (0, css_1.default)(newCode, {
        sourceFile: opts.sourceFile
      }); // add one tab after each new line

      const pugCode = `${node.name}.\n${replacedCode}`.replace(/\n/g, '\n\t');
      const astReplaced = (0, pug_parser_1.default)((0, pug_lexer_1.default)(pugCode));
      const scriptBlock = astReplaced.nodes[0].block; // do not change entire scriptBlock
      // this might be look like the correct ast,
      // but the begin and end loc numbers are wrong
      // eslint-disable-next-line no-param-reassign

      node.block.nodes = node.block.nodes.map((n, i) => {
        const {
          val,
          type
        } = scriptBlock.nodes[i];
        return Object.assign(Object.assign({}, n), {
          val,
          type
        });
      });
    }

    if (Array.isArray(node.attrs) && node.attrs.length >= 0) {
      node.attrs.forEach(attr => {
        let selectorType;
        let shouldReplace = false;

        if (attr.name === 'class' || options.triggerClassAttributes.some(item => (0, shouldTriggerAttribute_1.default)(attr, item))) {
          selectorType = '.';
          shouldReplace = true;
        }

        if (attr.name === 'id' || options.triggerIdAttributes.some(item => (0, shouldTriggerAttribute_1.default)(attr, item))) {
          selectorType = '#';
          shouldReplace = true;
        }

        if (!shouldReplace) {
          return;
        } // attr.val includes ' in the beginning and the end
        // remove them and reattach them after


        const prefix = attr.val.charAt(0);
        const suffix = attr.val.charAt(attr.val.length - 1);
        const val = attr.val.slice(1, attr.val.length - 1); // following will replace each whitespace
        // seperated value with its renamed one

        const replacedVal = val.split(' ').map(value => // renaming each value
        selectorsLibrary_1.default.get(`${selectorType}${value}`, {
          source: {
            file: opts.sourceFile || '',
            line: node.line,
            text: ''
          }
        }).replace(new RegExp(`^\\${selectorType}`), '')).join(' '); // eslint-disable-next-line no-param-reassign

        attr.val = prefix + replacedVal + suffix;
      });
    }
  });
  return (0, pug_source_gen_1.default)(ast);
};

exports.default = replacePug;
module.exports = exports.default;