"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const postcss_1 = require("postcss");

const cssVariablesLibrary_1 = __importDefault(require("../cssVariablesLibrary"));

const arrayToRegex_1 = __importDefault(require("../helpers/arrayToRegex"));

const keyframesLibrary_1 = __importDefault(require("../keyframesLibrary"));

const selectorsLibrary_1 = __importDefault(require("../selectorsLibrary"));

const regex_1 = __importDefault(require("./regex")); // calls the selectorLibrary.getAttributeSelector internally
// String.replace will call this function and
// get call selectorLibrary.getAttributeSelector directly


const getAttributeSelector = match => {
  const re = new RegExp(regex_1.default.commonAttributeSelectors);
  const exec = re.exec(match);

  if (!exec) {
    return match;
  }

  const stringChar = exec[3].charAt(0);
  const stringWithoutStringChars = exec[3].slice(1, exec[3].length - 1);
  let result = match;
  let newString = exec[3];
  const suffix = selectorsLibrary_1.default.getSuffix();
  const prefix = selectorsLibrary_1.default.getPrefix();

  if (exec[2] === '$') {
    newString = stringChar + stringWithoutStringChars + suffix + stringChar;
  }

  if (exec[2] === '^') {
    newString = stringChar + prefix + stringWithoutStringChars + stringChar;
  }

  result = result.replace(regex_1.default.strings, newString);
  return result;
};

const replaceCss = (css, opts = {}) => {
  const cssAST = (0, postcss_1.parse)(css);
  /* ******************** *
   * replace id selectors *
   * ******************** */

  cssAST.walk(node => {
    const parentName = node.parent.name || '';
    const selectorLib = selectorsLibrary_1.default.getIdSelector();
    const source = {
      file: opts.sourceFile || '',
      line: node.source.start.line,
      text: ''
    };

    if (node.selector && !parentName.match(/keyframes/)) {
      const regex = selectorLib.getAll({
        regex: true,
        addSelectorType: true
      });

      if (typeof regex !== 'string' && !(regex instanceof RegExp)) {
        return;
      } // eslint-disable-next-line no-param-reassign


      node.selectors = node.selectors.map(selector => selector // split selectors so it is easier to skip non matching selectors
      .split('#').map(splittedSelector => {
        const splittedSelectorWithDot = `#${splittedSelector}`;
        const prefixFreeSelector = splittedSelectorWithDot.replace(/\\/g, ''); // prevent returning prefixFreeSelectors
        // when there is not even a match

        if (!prefixFreeSelector.match(regex)) {
          return splittedSelector;
        }

        return prefixFreeSelector.replace(regex, match => selectorLib.get(match, {
          addSelectorType: true,
          source
        })).slice(1);
      }).join('#'));
    }
  });
  /* *********************** *
   * replace class selectors *
   * *********************** */

  cssAST.walk(node => {
    const parentName = node.parent.name || '';
    const selectorLib = selectorsLibrary_1.default.getClassSelector();
    const source = {
      file: opts.sourceFile || '',
      line: node.source.start.line,
      text: ''
    };

    if (node.selector && !parentName.match(/keyframes/)) {
      const regex = selectorLib.getAll({
        regex: true,
        addSelectorType: true
      });

      if (typeof regex !== 'string' && !(regex instanceof RegExp)) {
        return;
      } // eslint-disable-next-line no-param-reassign


      node.selectors = node.selectors.map(selector => selector // split selectors so it is easier to skip non matching selectors
      .split('.').map(splittedSelector => {
        const splittedSelectorWithDot = `.${splittedSelector}`;
        const prefixFreeSelector = splittedSelectorWithDot.replace(/\\/g, ''); // prevent returning prefixFreeSelectors
        // when there is not even a match

        if (!prefixFreeSelector.match(regex)) {
          return splittedSelector;
        }

        return prefixFreeSelector.replace(regex, match => selectorLib.get(match, {
          addSelectorType: true,
          source
        })).slice(1);
      }).join('.'));
    }
  });
  /* ***************** *
   * replace keyframes *
   * ***************** */

  cssAST.walkAtRules(node => {
    if (!node.name.match(/keyframes/)) {
      return;
    }

    const source = {
      file: opts.sourceFile || '',
      line: node.source.start.line,
      text: ''
    }; // do not count stats, as these are just the declarations
    // eslint-disable-next-line no-param-reassign

    node.params = keyframesLibrary_1.default.get(node.params, {
      countStats: false,
      source
    });
  });
  cssAST.walkDecls(node => {
    const source = {
      file: opts.sourceFile || '',
      line: node.source.start.line,
      text: ''
    };
    /* ************************** *
    * replace css variables var() *
    * *************************** */

    if (node.value.match(regex_1.default.cssVariables)) {
      const regex = (0, arrayToRegex_1.default)(Object.keys(cssVariablesLibrary_1.default.values), v => `--${v}`);

      if (regex) {
        // eslint-disable-next-line no-param-reassign
        node.value = node.value.replace(regex, match => `--${cssVariablesLibrary_1.default.get(match.replace(/^--/, ''), {
          source
        })}`);
      }
    }
    /* ******************************************** *
    * replace css variable declarations --variable: *
    * ********************************************* */


    if (node.type === 'decl' && node.prop.match('^--')) {
      // do not count stats, as these are just the declarations
      // eslint-disable-next-line no-param-reassign
      node.prop = cssVariablesLibrary_1.default.get(node.prop, {
        countStats: false,
        source
      });
    }
    /* ***************** *
    * replace animations *
    * ****************** */


    if (node.prop.match(/(animation|animation-name)/)) {
      // eslint-disable-next-line no-param-reassign
      node.value = node.value.replace(',', ' , ').split(' ').map(value => keyframesLibrary_1.default.get(value, {
        source
      })).join(' ').replace(' , ', ',');
    }
  });
  /* *************************** *
   * replace attribute selectors *
   * *************************** */

  cssAST.walkRules(node => {
    // We avoid doing 2 regexp search here by using a combined regular expression
    // This is an optimization since the processing is the same for class or id
    // eslint-disable-next-line no-param-reassign
    node.selector = node.selector.replace(regex_1.default.commonAttributeSelectors, match => getAttributeSelector(match));
  });
  return cssAST.toResult().css;
};

exports.default = replaceCss;
module.exports = exports.default;