"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CssVariablesLibrary = void 0;

const postcss_1 = require("postcss");

const baseLibrary_1 = require("./baseLibrary");

const regex_1 = __importDefault(require("./replace/regex"));

class CssVariablesLibrary extends baseLibrary_1.BaseLibrary {
  constructor() {
    super('variable');
  }

  fillLibrary(data) {
    const code = data.toString();
    const result = (0, postcss_1.parse)(code);
    result.walk(root => {
      if (root.type === 'decl' && root.prop.match(/^--/)) {
        this.set(root.prop);
      }
    });
  }

  get(cssVariable, opts = {}) {
    const isUsedVariable = new RegExp(regex_1.default.cssVariables).test(cssVariable);
    let variable = cssVariable;
    let fallback = ''; // if var(--variable)

    if (isUsedVariable) {
      const matches = new RegExp(regex_1.default.cssVariables).exec(cssVariable) || [];

      if (matches[2]) {
        fallback = this.get(matches[2]);
      }

      [, variable] = matches;
    }

    if (!variable) {
      return cssVariable;
    }

    const variableHasDash = new RegExp(/^--/).test(variable.trim());
    const cssVariableSelector = variable.trim().replace(/^--/, '');
    const getCssVariable = super.get(cssVariableSelector, opts);
    const preparedResult = variableHasDash ? `--${getCssVariable}` : getCssVariable;

    if (isUsedVariable) {
      if (fallback) {
        return `var(${preparedResult}, ${fallback})`;
      }

      return `var(${preparedResult})`;
    }

    return preparedResult;
  }

  set(...args) {
    const [cssVariable, ...params] = args;

    if (!cssVariable) {
      return;
    }

    if (Array.isArray(cssVariable)) {
      cssVariable.forEach(item => this.set(item, ...params));
      return;
    }

    const cssVariableSelector = cssVariable.trim().replace(/^--/, '');
    super.set(cssVariableSelector, ...params);
  }

  get cssVariables() {
    return this.values;
  }

  set cssVariables(cssVariables) {
    this.values = cssVariables;
  }

  get compressedCssVariables() {
    return this.compressedValues;
  }

  set compressedCssVariables(compressedCssVariables) {
    this.compressedValues = compressedCssVariables;
  }

}

exports.CssVariablesLibrary = CssVariablesLibrary;
exports.default = new CssVariablesLibrary();